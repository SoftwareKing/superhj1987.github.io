---
layout: post
title: "互联网后端基础技术栈"
date: 2016-08-24 23:10:34 +0800
comments: true
categories: work
---

对于一个互联网企业，后端服务是必不可少的一个组成部分。抛开业务应用来说，往下的基础服务设施做到哪些才能够保证业务应用的稳定、可靠、可维护呢？纵观整个互联网技术体系再结合公司的目前状况，必不可少或者起到关键作用的基础技术/组件如下图所示：

<a href="/images/blog_images/server_basic_stack/server-basic-tech-stack.png" target="_blank"><img src="/images/blog_images/server_basic_stack/server-basic-tech-stack.png"/></a>

- Api网关
- 后端基础框架
- 数据库
- 搜索引擎
- 分布式文件存储
- 离线计算
- 实时计算
- 数据即席分析
- 服务治理框架
- 单点登录系统
- 统一配置中心
- 统一认证中心
- 统一日志服务
- 统一调度中心
- 故障监控

<!--more-->

## Api网关

在移动app的开发过程中，通常后端提供的接口需要以下功能的支持：

- 负载均衡
- api访问权限控制
- 用户鉴权

一般的做法，使用nginx做负载均衡，然后在每个业务应用里做api接口的访问权限控制和用户鉴权，更优化一点的方式则是把后两者做成公共类库供所有业务调用。但从总体上来看，这三种特性都属于业务的公共需求，更可取的方式则是集成到一起作为一个服务，既可以动态地修改权限控制和鉴权机制，也可以减少每个业务集成这些机制的成本。这种服务就是Api网关(<http://blog.csdn.net/pzxwhc/article/details/49873623>)，可以选择自己实现，也可以使用开源软件实现，如[Kong](https://getkong.org/)。如下图所示：

![api_gw.png][/images/blog_images/server_basic_stack/api_gw.png]

但是以上方案的一个问题是由于所有api请求都要经过api网关的很容易成为系统的性能瓶颈。因此，可以采取的方案是：去电api网关，让业务应用直接对接统一认证中心，在基础框架层面保证每个api调用都需要先通过统一认证中心的认证，这里可以采取缓存认证结果的方式避免对统一认证中心产生过大的请求压力。

## 业务应用

业务应用分为：在线业务应用和内部业务应用。

- 在线业务应用：直接面向互联网用户的应用、接口等，典型的特点就是：请求量大、高并发、高可用、对故障的容忍度低。
- 内部业务应用：这个是面向公司内部的应用。比如，内部数据管理平台、广告投放平台等。相比起在线业务应用，其特点: 数据保密性高、压力小、并发量小、允许故障的发生。

业务应用基于后端的基础框架开发，针对Java后端来说，应该有的几个框架如下：

- MVC框架：从十年前流行的Struts1、2到现在流行的SpringMVC、Jersey，还有国人开发的JFinal以及阿里内部用的WebX，对于这些框架尤其是各有千秋的后三者，选型的主要因素是看看你的团队是否有一个能够做二次开发、定制的人在。很多时候，针对这些通用的框架，你是需要做一些特定的开发才能满足特定的需求的。比如，很多团队传递参数使用的都是underScore的命名法(下划线连接单词)，但是Java中确实使用LowCamel命名的。对于SpringMVC，当然可以通过注解的alias来指定，但这样需要对每一个参数都要指定alias有点效率太低，此外ModelAttribute也不支持别名。完全可以通过在框架层面统一对参数做Camel命名的转换达到这个目的。
- IOC框架：ioc带来的好处无须多言。目前Java中最为流行的Spring应该是做IOC最为普遍的框架。
- ORM框架：MyBatis应该是目前最为流行的orm框架。此外，Spring提供的jdbcTemplate、RedisTemplate也都是比较不错的orm。

对于这些框架来说，最为关键的是根据团队技术构成选择最合适的，有能力开发自己的框架则更好。此外，这里需要提供一个后端应用模板的框架或生成工具(如maven的archetype)给团队成员使用。能够让大家在开发新的应用的时候，迅速的生成雏形应用。

## 统一认证中心

统一认证中心，主要是对app用户、内部用户的认证服务，包括

- 用户的注册、登录验证、token鉴权
- 内部信息系统用户的管理和登录鉴权
- App的管理，包括app的secret生成，app信息的验证(如验证接口签名)等。

## 业务因公

## 故障监控

对于面向用户的线上服务，发生故障是一件很严重的事情。因此，做好线上服务的故障检测告警是一件非常重要的事情。可以将故障监控分为以下两个层面的监控：

- 运维层面的监控：主要指的对主机的带宽、cpu、内存、硬盘、io等硬件资源的监控。这可以使用开源的nagios、cacti等开源软件进行监控。目前，市面上也有很多第三方服务能够提供对于主机资源的监控，如监控宝等。
- 业务层面的监控：是在主机资源层面以上的监控，比如业务逻辑遇到了异常等。需要业务中加入相关的监控代码，比如在异常抛出的地方，加一段日志记录。

监控还有一个关键的步骤就是告警。告警的方式有很多种：邮件、im、短信等。考虑到故障的重要性不同、告警的合理性、便于定位问题等因素，有以下建议：

- 告警日志要记录发生故障的机器id，尤其是在集群服务中，如果没有记录机器id，那么对于后续的问题定位会很困难。
- 要对告警做聚合，不要每一个故障都单独进行告警，这样会对工程师造成极大的困扰。
- 要对告警做等级划分，不能对所有告警都做同样的优先级处理。
- 使用微信做为告警软件，能够在节省短信成本的情况下，保证告警的到达率。

故障告警之后，那么最最关键的就是应对了。对于创业公司来说，24小时待命是必备的素质，当遇到告警的时候，需要尽快对故障做出反应，找到问题所在，并能在可控时间内解决问题。对于故障问题的排查，基本上都是依赖于日志的。只要日志打的合理，一般情况下是能够很快定位到问题所在的，但是如果是分布式服务，并且日志数据量特别大的情况下，如何定位日志就成为了难题。这里有几个方案：

- 建立ELK体系，便于快速搜索、定位日志。对于ELK的介绍，可以见：<https://xiequan.info/%E4%BD%BF%E7%94%A8elasticsearch-logstash-kibana%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E9%9B%86%E4%B8%AD%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0%E5%AE%9E%E8%B7%B5/>
- 建立染色日志机制(<https://www.zhihu.com/question/20292868>)，尤其对于微服务架构，要做好对每一个请求的整个链路的监控，能够在发生问题的时候在海量调用中快速定位并收集单个异常请求信息。此外，[Mercury:唯品会全链路应用监控系统解决方案详解](http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=2653547643&idx=1&sn=c06dc9b0f59e8ae3d2f9feb734da4459&scene=1&srcid=0808MaLgymxNlsh4Z31oWKUi#rd)也是类似的思路。
[/images]: 
