---
layout: post
title: "研发体系这些事"
date: 2016-07-19 20:39:34 +0800
comments: true
categories: work
---

几年前在读研究生的时候，自己负责着实验室的项目，就一直在思索如何建立一套简单又高效的研发管理体系，能够保证项目高质量的顺利进行同时还能够提升团队成员的技术level。后来在自己在校的几次小的创业中，也做过一些尝试。但只能是摸着石头过河，从来没有见识过业界的最佳实践是什么样的。毕业后进入前东家，在几个项目的参与过程中，总算是见到了大公司的研发管理是如何进行的。直至加入目前的公司，将研发管理系统梳理一遍，且学且抄且实践，对这一套东西算是有了一定的实践感悟。

<!--more-->

对于一个研发管理体系，其核心是围绕着一个产品流程来进行的。

![product_full_process.jpg](images/blog_images/product_full_process.jpg)

根据上图可以把研发管理系统分为以下几部分：

- 文档协作机制
- 代码协作机制
- 自动化测试机制
- 自动化部署机制
- 故障监控机制
- 技术分享机制

## 文档协作

## 代码协作

对于一个技术团队，最最关键的肯定是写代码。一个人单打独斗那倒好说，但是这就像篮球场上，一对一靠的就是个人的硬实力，但是5对5，那可就不仅仅是个人实力强就赢得了的了。因此对于技术团队来说，代码协作是至关重要的一个部分。

- 代码版本管理：Git + SVN

	几年前最流行的代码版本管理工具是svn（当然此前，更加古老的还有cvs之流），的确为程序员们的代码管理带来了很多便捷。但到了现在，相比起这种集中式代码管理，目前最为火热的当属git这种分布式代码管理工具。在Linux上直接搭建git服务器来构建项目的git系统的。而这几年随着Github以及类似系统的涌现，对于很多私人项目我都是采用oschina或者gitcafe提供的git私有代码管理来做代码版本管理的。当然，对于公司来说，有很多开源类github系统可以搭建在企业内网。详细的可以参见：[搭建自己的github](http://www.rowkey.me/blog/2015/11/13/your-own-github/)。当然，对比svn，git也是有缺点的。无法天然的支持对于目录级别的权限管理和基于目录的版本管理操作是目前不得不结合svn和git一起使用的重要原因。目前，我们主要使用git做版本管理，但是辅以svn做基于目录级别的发布包管理。
	
- 代码分支/Tag管理： Git Flow

	其实分支/Tag管理是代码版本管理包含的内容，之所以单独出来，是因为对于分支的使用其实还是有一定的原则和技巧的。并非如很多人一样，所有项目就一个master分支，所有修改都往这里塞。目前，最为流行的一种基于分支的工作方式就是:Git flow。介绍可以见: [基于git的源代码管理模型——git flow](http://www.ituring.com.cn/article/56870)。简单概括就是：
	- master和develop作为主分支。主分支是所有开发活动的核心分支。所有的开发活动产生的输出物最终都会反映到主分支的代码中。master是可以随时发布的分支，而develop则时刻保持最新的开发代码。
	- 辅助分支是用于组织解决特定问题的各种软件开发活动的分支。辅助分支主要用于组织软件新功能的并行开发、简化新功能开发代码的跟踪、辅助完成版本发布工作以及对生产代码的缺陷进行紧急修复工作。这些分支与主分支不同，通常只会在有限的时间范围内存在。包括：
		- 用于开发新功能时所使用的feature分支；
		- 用于辅助版本发布的release分支；
		- 用于修正生产代码中的缺陷的hotfix分支。
对于此种开发模型，这里也提供了一个命令行工具：<https://github.com/nvie/gitflow>
	
- 代码review机制: 结对 + 定期review + PR