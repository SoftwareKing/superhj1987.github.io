---
layout: post
title: "研发体系这些事"
date: 2016-08-11 20:30:34 +0800
comments: true
categories: work
---

几年前在读研究生的时候，自己负责着实验室的项目，就一直在思索如何建立一套简单又高效的研发管理体系，能够在保证项目高质量顺利进行的同时还能够提升团队成员的技术level。后来在自己在校的几次小的创业中，也做过一些尝试。但那些能是摸着石头过河，从来没有见识过业界的最佳实践是什么样的。毕业后进入前东家，在几个项目的参与过程中，总算是见到了大公司的研发管理是如何进行的。直至加入目前的公司，将研发管理系统梳理一遍，且学且抄且实践，对这一套东西算是有了一定的实践感悟。

<!--more-->

对于一个研发管理体系，其核心是围绕着一个产品流程来进行的。

<img src="/images/blog_images/product_full_process.jpg" style="width:500px;"/>

根据上图可以把研发管理系统分为以下几部分：

- 文档协作机制
- 代码协作机制
- 测试机制
- 自动化部署机制
- 故障监控机制
- 技术分享机制

## 文档协作

研发中首当其冲的就是文档撰写，这个很多情况下都决定了项目的可维护、可管理性。有人会说现在流行的是敏捷开发，根本不需要写文档，但其实这是对敏捷的误解。敏捷开发强调的是快速迭代、快速试错，而非简单粗暴。对于一个项目，从开始就需要需求文档、产品原型文档、项目进度文档等等，而到了研发这一步，在系统实现、写代码之前最好的就是先“想”再做，而“想”的一种输出形式就是文档。对于一个软件系统，一般来说需要写的文档有以下几种：

- 系统业务流程文档：描述系统业务逻辑的文档，能清晰的说明真个业务的流程。
- 系统架构设计文档：对整个系统的架构的描述，需要包含系统的各个关键组成模块以及相关的各个关键技术点等。
- 系统功能模块概要设计/详细设计文档：对于某一个模块的流程、逻辑的描述。
- 数据DDL/DML文档: 与系统相关的数据库的DDL和DML文档，对于前者，是需要包含所有的操作的，而对于后者，必不可少的是查询语句，用来提供给DBA，来做查询sql的review，以保证索引的正确建立等。
- 系统部署文档：描述系统关键部分部署在哪里，需要做哪些配置。

尤其对于一些相对复杂的功能来说，整理思路形成文档，不仅可以让自己逻辑清晰，也能让后续维护的人更快的接手下去。

而对于文档协作的方式，我自己经历过的有以下几种：

- 使用word撰写各种文档，提交到svn等版本管理工具上
- 使用google doc进行协作
- 使用tower、teambition等团队协作服务
- 使用禅道、jira、wiki等项目管理软件
- 使用markdown撰写文档，使用git做版本管理

我自己比较推崇的是使用markdown撰写文档，然后使用git、svn版本管理工具或者是其他团队协作工具做版本管理。之所以使用markdown, 真的是极大节省了使用word时调各种格式、样式耗费的时间。

## 代码协作

对于一个技术团队，最最关键的肯定是写代码。一个人单打独斗那倒好说，但是这就像篮球场上，一对一靠的就是个人的硬实力，但是5对5，那可就不仅仅是个人实力强就赢得了的了。因此对于技术团队来说，代码协作是至关重要的一个部分。

- 代码版本管理：Git + SVN

	几年前最流行的代码版本管理工具是svn（当然此前，更加古老的还有cvs之流），的确为程序员们的代码管理带来了很多便捷。但到了现在，相比起这种集中式代码管理，目前最为火热的当属git这种分布式代码管理工具，在Linux上直接搭建git服务器来构建项目的git系统的。而这几年随着Github以及类似系统的涌现，对于很多私人项目我都是采用oschina或者gitcafe提供的git私有代码管理来做代码版本管理的。当然，对于公司来说，有很多开源类github系统可以搭建在企业内网。详细的可以参见：[搭建自己的github](http://www.rowkey.me/blog/2015/11/13/your-own-github/)。当然，对比svn，git也是有缺点的。无法天然的支持对于目录级别的权限管理和基于目录的版本管理操作是目前不得不结合svn和git一起使用的重要原因。目前，我们主要使用git做版本管理，但是辅以svn做基于目录级别的发布包管理。
	
- 代码分支/Tag管理： Git Flow

	其实分支/Tag管理是代码版本管理包含的内容，之所以单独出来，是因为对于分支的使用其实还是有一定的原则和技巧的。并非如很多人一样，所有项目就一个master分支，所有修改都往这里塞。目前，最为流行的一种基于分支的工作方式就是:Git flow。介绍可以见: [基于git的源代码管理模型——git flow](http://www.ituring.com.cn/article/56870)。简单概括就是：
	- master和develop作为主分支。主分支是所有开发活动的核心分支。所有的开发活动产生的输出物最终都会反映到主分支的代码中。master是可以随时发布的分支，而develop则时刻保持最新的开发代码。
	- 辅助分支是用于组织解决特定问题的各种软件开发活动的分支。辅助分支主要用于组织软件新功能的并行开发、简化新功能开发代码的跟踪、辅助完成版本发布工作以及对生产代码的缺陷进行紧急修复工作。这些分支与主分支不同，通常只会在有限的时间范围内存在。包括：
		- 用于开发新功能时所使用的feature分支；
		- 用于辅助版本发布的release分支；
		- 用于修正生产代码中的缺陷的hotfix分支。
对于此种开发模型，这里也提供了一个命令行工具：<https://github.com/nvie/gitflow>
	
- 代码质量保证：结对编程 + 定期review + PR目前一种比较好的方式。结对编程这个是一个老生常谈的方式，两个人共同承担某一开发任务，互相保证对方的代码质量，在很大程度上能够提高代码质量。而定期review则是让团队所有的成员都能够参与到这个过程中，不仅仅能够保证被review者的代码质量，也能够让团队成员学习到好的代码是怎样的而差的代码又是怎样的。PR是Pull Request的简写，当开发完成的代码提交到主分支时，需要发起pull request，此时团队负责人需要review相关代码，确保没有问题之后，才能accept此次pr。当然，上面讲述的是如何通过人来保证代码质量。除此之外，还可以通过技术上的手段在一定程度上保障代码的质量，这一部分在后续的自动化测试机制会讲述。

## 测试机制

当代码开发完成之后，需要测试的介入来保证功能的正常运行。一般来说，测试分为：

- 人工测试
- 自动化测试

对于人工测试，需要测试人员根据产品需求，形成测试用例，然后根据这些用例做相应的测试。测试用例的一个模板

针对Java项目，可以将自动化测试分为以下几步：

- 源代码规范检查：对于Java来说，代码规范的检查一般使用checkstyle来检查。
- 源代码静态质量检查: 常用的工具是pmd, 可以检查Java源文件中的潜在问题, 比如空try/catch/finally/switch语句块等。 
- 字节码bug检查：常用工具是findbugs,基于Bug Patterns概念，查找javabytecode（.class文件）中的潜在bug。如NullPoint空指针检查、没有合理关闭资源、字符串相同判断错（==，而不是equals）。
- 单元测试：使用junit即可，当然在这里当使用mvn时，其test phrase会默认生成测试报告到${project.build.directory}/surefile-reports文件夹中。

以上提到的工具，都是有maven插件的。通常情况下，也推荐使用这些工具的maven插件来调用。

目前最流行的自动化ci工具jenkins以及其各种丰富的插件可以提供这些功能，集成到一个测试流程中。

## 自动化部署机制

## 故障监控机制

## 技术分享机制


